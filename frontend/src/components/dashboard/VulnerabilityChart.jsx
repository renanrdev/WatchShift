import React, { useMemo } from 'react';
import { Card, CardContent, Typography, Box } from '@mui/material';
import { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer, CartesianGrid, Cell, LabelList } from 'recharts';

/**
 * Componente que exibe um gráfico de barras com as vulnerabilidades agrupadas por severidade.
 * 
 * @param {Object} props - Propriedades do componente
 * @param {Object} props.data - Dados das vulnerabilidades
 * @param {number} props.data.critical - Número de vulnerabilidades críticas
 * @param {number} props.data.high - Número de vulnerabilidades altas
 * @param {number} props.data.medium - Número de vulnerabilidades médias
 * @param {number} props.data.low - Número de vulnerabilidades baixas
 * @param {number} props.data.unknown - Número de vulnerabilidades desconhecidas
 * @returns {JSX.Element} O componente renderizado
 */
const VulnerabilityChart = ({ data }) => {
  // Verificamos a validade dos dados
  const isValidData = data && typeof data === 'object';
  
  const chartData = useMemo(() => {
    if (!isValidData) return [];
    
    return [
      { name: 'Crítica', count: data.critical || 0, color: '#d32f2f' },
      { name: 'Alta', count: data.high || 0, color: '#f44336' },
      { name: 'Média', count: data.medium || 0, color: '#ff9800' },
      { name: 'Baixa', count: data.low || 0, color: '#ffeb3b' },
      { name: 'Desconhecida', count: data.unknown || 0, color: '#9e9e9e' }
    ].filter(item => item.count > 0);
  }, [isValidData, data]);

  const hasData = chartData.length > 0;

  const totalVulnerabilities = useMemo(() => {
    return chartData.reduce((total, item) => total + item.count, 0);
  }, [chartData]);

  const tooltipFormatter = (value) => {
    const percentage = totalVulnerabilities > 0 ? Math.round((value / totalVulnerabilities) * 100) : 0;
    return [`${value} (${percentage}%)`, 'Vulnerabilidades'];
  };

  const axisFormatter = (value) => {
    if (value >= 1000) return `${(value / 1000).toFixed(1)}k`;
    return value;
  };

  if (!isValidData) {
    return (
      <Card>
        <CardContent>
          <Typography variant="h6" gutterBottom>
            Vulnerabilidades por Severidade
          </Typography>
          <Box 
            sx={{ 
              height: 250, 
              display: 'flex', 
              alignItems: 'center', 
              justifyContent: 'center' 
            }}
          >
            <Typography color="text.secondary">
              Dados de vulnerabilidades não disponíveis
            </Typography>
          </Box>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card>
      <CardContent>
        <Typography variant="h6" gutterBottom>
          Vulnerabilidades por Severidade
        </Typography>
        
        {!hasData ? (
          <Box 
            sx={{ 
              height: 200, 
              display: 'flex', 
              alignItems: 'center', 
              justifyContent: 'center' 
            }}
          >
            <Typography color="text.secondary">
              Nenhuma vulnerabilidade detectada
            </Typography>
          </Box>
        ) : (
          <>
            <Box sx={{ mb: 1 }}>
              <Typography variant="body2" color="text.secondary">
                Total de vulnerabilidades: {totalVulnerabilities}
              </Typography>
            </Box>
            <div style={{ width: '100%', height: 250 }}>
              <ResponsiveContainer width="100%" height="100%">
                <BarChart data={chartData} layout="vertical">
                  <CartesianGrid strokeDasharray="3 3" horizontal={false} />
                  <XAxis 
                    type="number" 
                    tickFormatter={axisFormatter}
                    tick={{ fill: '#666', fontSize: 12 }}
                  />
                  <YAxis 
                    dataKey="name" 
                    type="category" 
                    width={100} 
                    tick={{ fill: '#666', fontSize: 12 }}
                  />
                  <Tooltip 
                    formatter={tooltipFormatter}
                    contentStyle={{ backgroundColor: 'rgba(255, 255, 255, 0.95)', borderRadius: '4px' }}
                    cursor={{ fill: 'rgba(0, 0, 0, 0.05)' }}
                  />
                  <Bar 
                    dataKey="count" 
                    nameKey="name" 
                    radius={[0, 4, 4, 0]}
                    animationDuration={1000}
                  >
                    {chartData.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={entry.color} />
                    ))}
                    <LabelList 
                      dataKey="count" 
                      position="right" 
                      style={{ fill: '#666', fontSize: 12, fontWeight: 'bold' }} 
                    />
                  </Bar>
                </BarChart>
              </ResponsiveContainer>
            </div>

            {/* Legenda do gráfico */}
            <Box sx={{ display: 'flex', flexWrap: 'wrap', justifyContent: 'center', gap: 2, mt: 2 }}>
              {chartData.map((entry) => (
                <Box 
                  key={entry.name} 
                  sx={{ 
                    display: 'flex', 
                    alignItems: 'center',
                    gap: 1 
                  }}
                >
                  <Box 
                    sx={{ 
                      width: 12, 
                      height: 12, 
                      backgroundColor: entry.color, 
                      borderRadius: '2px' 
                    }} 
                  />
                  <Typography variant="caption" color="text.secondary">
                    {entry.name}: {entry.count}
                  </Typography>
                </Box>
              ))}
            </Box>
          </>
        )}
      </CardContent>
    </Card>
  );
};

export default VulnerabilityChart;